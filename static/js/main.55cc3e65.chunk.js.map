{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","containers/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","url","href","replace","getLargePhoto","target","rel","className","alt","src","style","width","height","borderRadius","CardList","robots","map","user","i","SearchBox","searchChange","refreshSel","type","placeholder","onChange","marginTop","onClick","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","App","useState","setRobots","searchField","setSearchField","themes","onRefreshSel","console","log","Promise","all","theme","fetch","toLowerCase","then","resp","array","catch","err","useEffect","filteredRobots","filter","robot","includes","event","value","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6MAyBeA,EAtBF,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IAQlB,OACI,mBAAGC,KANe,SAACD,GACnB,OAAOA,EACNE,QAAQ,SAAU,UAClBA,QAAQ,SAAU,WAGVC,CAAcH,GAAMI,OAAO,SAASC,IAAI,aAAjD,SACI,sBAAKC,UAAU,+BAAf,UAEI,qBAAKA,UAAU,WAAWC,IAAI,QAAQC,IAAKR,EAAKS,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,aAAc,SACxG,8BACI,mBAAGN,UAAU,WAAb,SAAyBP,YCQ9Bc,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAKIlB,KAAMe,EAAOG,GAAGlB,KAChBC,IAAKc,EAAOG,GAAGjB,KALViB,SCYlBC,EArBG,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WAC/B,OACI,sBAAKd,UAAU,MAAf,UACI,uBACIA,UAAU,sBACVe,KAAK,SACLC,YAAY,YACZC,SAAUJ,IAEd,qBAAKV,MAAO,CAACe,UAAW,QAAxB,SACI,yBACIlB,UAAU,+EACVmB,QAASL,EAFb,UAII,mBAAGd,UAAU,kBAJjB,8B,4BCSDoB,E,kDAlBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAIG,KAAKJ,MAAMC,SACJ,yDAEJG,KAAKL,MAAMO,a,GAfEC,aCkEbC,G,MA1DH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTvB,EADS,KACDwB,EADC,OAEsBD,mBAAS,IAF/B,mBAETE,EAFS,KAEIC,EAFJ,OAGYH,mBAAS,CAAC,SAAU,QAAS,QAAS,SAAU,SAAU,SAAU,QAAS,WAAY,QAAS,SAAU,QAAS,MAAO,SAAU,QAAS,eAH3J,mBAGTI,EAHS,KAiBVC,GAjBU,KAiBK,WACnBJ,EAAU,IACVK,QAAQC,IAAI,wBACZC,QAAQC,IAAIL,EAAO1B,KAAI,SAAAgC,GAAK,OAC1BC,MAAM,wCAAD,OAAyCD,EAAME,gBAAiBC,MAAK,SAAAC,GAAI,MAAK,CAAEpD,KAAMgD,EAAO/C,IAAKmD,EAAKnD,YAE3GkD,MAAK,SAAAE,GAAK,OAAId,EAAUc,MACxBC,OAAM,SAAAC,GAAG,OAAIX,QAAQC,SAG1BW,qBAAU,WACRb,MACC,IAGH,IAIMc,EAAiB1C,EAAO2C,QAAO,SAAAC,GACnC,OAAOA,EAAM3D,KAAKkD,cAAcU,SAASpB,EAAYU,kBAGvD,OAEE,sBAAK3C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,8BACA,cAAC,EAAD,CAAWa,aAZQ,SAACyC,GACtBpB,EAAeoB,EAAMxD,OAAOyD,QAWezC,WAAYsB,IAElD5B,EAAOgD,OAGJ,cAAE,EAAF,UACE,cAAC,EAAD,CAAUhD,OAAQ0C,MAHnB,oBAAIlD,UAAU,KAAd,6BC7CEyD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAEN,cAAC,EAAD,IAEDC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.55cc3e65.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// const Card = ({ name, email, id }) => { // Destructure the props right inside of the brackets\r\nconst Card = ({ name, url }) => { // Destructure the props right inside of the brackets\r\n    // use props.name, props.email, props.id throught the code, or\r\n    //const { name, email, id } = props;\r\n    const getLargePhoto = (url) => {\r\n        return url\r\n        .replace(/&h=200/, \"&h=900\")\r\n        .replace(/&w=200/, \"&w=1600\");       \r\n    }\r\n    return (\r\n        <a href={getLargePhoto(url)} target=\"_blank\" rel=\"noreferrer\">\r\n            <div className='tc dib br3 pa3 ma2 grow bw2 '>\r\n                {/* <img alt='robot' src={`https://robohash.org/${id}?size=200x200`}/> */}\r\n                <img className=\"shadow-5\" alt='robot' src={url} style={{ width: \"200px\", height: \"200px\", borderRadius: \"50%\" }} />\r\n                <div>\r\n                    <p className=\"f3 white\">{name}</p>\r\n                    {/* <p>{email}</p> */}\r\n                </div>\r\n            </div>\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i} // Remember to give a unique key when donig a loop\r\n                            // id={robots[i].id}\r\n                            // name={robots[i].name}\r\n                            // email={robots[i].email}\r\n                            name={robots[i].name}\r\n                            url={robots[i].url}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange, refreshSel }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba shadow-5 br2\"\r\n                type=\"search\"\r\n                placeholder=\"Search...\"\r\n                onChange={searchChange}\r\n            />\r\n            <div style={{marginTop: \"20px\"}}>\r\n                <button \r\n                    className=\"f6 grow no-underline br-pill ba ph3 pv2 mb2 dib white bg-transparent pointer\"\r\n                    onClick={refreshSel}\r\n                >\r\n                    <i className=\"fa fa-refresh\"></i> Refresh Selection\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false //create a property\r\n        }\r\n    }\r\n    //new lifecycle method in react 16\r\n    componentDidCatch(error, info) { // like try/catch\r\n        this.setState({hasError:true})\r\n    }\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops. That is not good.</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { useState, useEffect } from 'react';\nimport Scroll from \"../components/Scroll\";\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from './ErrorBoundary';\n\n// import { robots } from './robots'; // needs to be destructured because not default export\nimport \"./App.css\";\n//In order to use state, we have to use classes\n\nconst App = () => {\n  const [robots, setRobots] = useState([]);\n  const [searchField, setSearchField] = useState('');\n  const [themes, setThemes] = useState([\"Forest\", \"Beach\", \"Ocean\", \"Desert\", \"Arctic\", \"Meadow\", \"Caves\", \"Mountain\", \"Space\", \"Jungle\", \"River\", \"Sky\", \"Tundra\", \"Swamp\", \"Underwater\"]);\n\n\n\n  // useEffect(() => {\n  //   fetch(\"https://jsonplaceholder.typicode.com/users\") // fetch is a method on the Window object.\n  //     // It comes with all browsers now: it helps us make requests to servers \n  //     // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n  //     .then(response => response.json())\n  //     .then(users => {\n  //       console.log(\"users\",users);\n  //       setRobots(users)\n  //     });\n  // }, []); // Add an empty array to simulate only ComponentDidMount (and not ComponentDidUpdate)\n  const onRefreshSel = () => {\n    setRobots([]);\n    console.log(\"refreshing selection\");\n    Promise.all(themes.map(theme =>\n      fetch(`https://source.unsplash.com/200x200/?${theme.toLowerCase()}`).then(resp => ({ name: theme, url: resp.url }))\n    ))\n      .then(array => setRobots(array))\n      .catch(err => console.log);\n  }\n\n  useEffect(() => {\n    onRefreshSel();\n  }, []);\n\n\n  const onSearchChange = (event) => { // When you create your own methods on a component, you have to use arrow function syntax\n    setSearchField(event.target.value);\n  }\n\n  const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase())\n  });\n\n  return (\n\n    <div className=\"tc\">\n      <h1 className=\"f1\">Landscape Picker</h1>\n      <SearchBox searchChange={onSearchChange} refreshSel={onRefreshSel} />\n      {\n        !robots.length\n          ? (<h1 className=\"tc\">Loading...</h1>) :\n          (\n            < ErrorBoundary >\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          )\n      }\n    </div >\n  )\n}\n\nexport default App;\n//default is used when you're only returning one component.\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  // <React.StrictMode>\n   <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}