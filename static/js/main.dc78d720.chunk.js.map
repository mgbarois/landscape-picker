{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Scroll","props","style","overflow","border","height","children","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAeeA,EAVA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SAGKJ,EAAMK,YCMJC,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAGzB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,mBACpB,gCACI,6BAAKF,IACL,4BAAIC,WCaLK,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCIlBC,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKT,UAAU,MAAf,SACI,uBACIA,UAAU,kCACVU,KAAK,SACLC,YAAY,WACZC,SAAUH,OCYXI,E,kDAlBX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IACDwB,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAIG,KAAKJ,MAAMC,SACJ,yDAEJG,KAAK5B,MAAMK,a,GAfEyB,aCmDbC,G,wDA1Cb,aAAe,IAAD,8BACZ,gBAeFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAf1C,EAAKZ,MAAQ,CACXV,OAAQ,GACRoB,YAAa,IAJH,E,gEAQO,IAAD,OAClBG,MAAM,8CAGHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEf,OAAQ2B,S,+BAOlC,MACyBb,KAAKJ,MAA7BV,EADD,EACCA,OAAQoB,EADT,EACSA,YACVQ,EAAiB5B,EAAO6B,QAAO,SAAAC,GACnC,OAAOA,EAAMrC,KAAKsC,cAAcC,SAASZ,EAAYW,kBAGvD,OAAS/B,EAAOiC,OAGZ,sBAAKrC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcS,KAAKI,iBAFhC,IAGE,cAAC,EAAD,UACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAUlB,OAAQ4B,IADpB,YANN,gD,GA5BYZ,cCEHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAEN,cAAC,EAAD,IAEDC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.dc78d720.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n// Create components that wrap other components\r\n// \"Render whatever is inside of you\"\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: \"scroll\", border: \"1px solid black\", height: \"400px\" }}>\r\n            {/* In JSX you can add style with double curly brackets.\r\n            It's a Javascript expression, within which we are returning an object that can have CSS styles */}\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => { // Destructure the props right inside of the brackets\r\n    // use props.name, props.email, props.id throught the code, or\r\n    //const { name, email, id } = props;\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i} // Remember to give a unique key when donig a loop\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lighest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"Search..\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false //create a property\r\n        }\r\n    }\r\n    //new lifecycle method in react 16\r\n    componentDidCatch(error, info) { // like try/catch\r\n        this.setState({hasError:true})\r\n    }\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops. That is not good.</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport Scroll from \"../components/Scroll\";\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\n// import { robots } from './robots'; // needs to be destructured because not default export\nimport \"./App.css\";\n//In order to use state, we have to use classes\n\nclass App extends Component {\n  constructor() {\n    super() // necessary to call the constructor of component first\n    this.state = {\n      robots: [],\n      searchField: \"\"\n    }\n  }\n\n  componentDidMount() { // No need for arrow function syntax, because function are part of React\n    fetch(\"https://jsonplaceholder.typicode.com/users\") // fetch is a method on the Window object.\n      // It comes with all browsers now: it helps us make requests to servers \n      // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n\n  onSearchChange = (event) => { // When you create your own methods on a component, you have to use arrow function syntax\n    this.setState({ searchField: event.target.value })\n    // console.log(this.state.searchField);\n  }\n  render() { // react components  always need a render() function\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return (!robots.length) ?  // or :if (robots.length === 0) ... else.. -> \n      <h1>Loading...</h1> :\n      (\n        <div className=\"tc\">\n          <h1 className=\"f1\">Robofriends</h1>\n          <SearchBox searchChange={this.onSearchChange} /> {/* have to use \"this.\" because we're inside an object (App)*/}\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} /> {/* get it from the state instead - which contains the filtered robots list*/}\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      ); //parentheses necessary if you're writing more than one jsx element\n  }\n}\n\nexport default App;\n//default is used when you're only returning one component.\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  // <React.StrictMode>\n   <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}